# Want to test string manipulation and getting a product of numbers
# That start as part of a string

b = "73167176531330624919225119674426574742355349194934"
c = "96983520312774506326239578318016984801869478851843"
d = "85861560789112949495459501737958331952853208805511"
e = "12540698747158523863050715693290963295227443043557"
f = "66896648950445244523161731856403098711121722383113"
g = "62229893423380308135336276614282806444486645238749"
h = "30358907296290491560440772390713810515859307960866"
i = "70172427121883998797908792274921901699720888093776"
j = "65727333001053367881220235421809751254540594752243"
k = "52584907711670556013604839586446706324415722155397"
l = "53697817977846174064955149290862569321978468622482"
m = "83972241375657056057490261407972968652414535100474"
n = "82166370484403199890008895243450658541227588666881"
o = "16427171479924442928230863465674813919123162824586"
p = "17866458359124566529476545682848912883142607690042"
q = "24219022671055626321111109370544217506941658960408"
r = "07198403850962455444362981230987879927244284909188"
s = "84580156166097919133875499200524063689912560717606"
t = "05886116467109405077541002256983155200055935729725"
u = "71636269561882670428252483600823257530420752963450"
myinteger =b + c + d+e +f+ g + h + i +j+k+l+m+n+o+p+q+r+s+t+u
myinteger = myinteger.replace(' ','')
print(len(myinteger))
prod = 7
count = 0
large = 0

for i in range(1,len(myinteger)-11):
    #print('i',i)
    prod = 1
    for ch in range(count,count+13):
        #print('ch',ch)
        #print('myinteger[ch]',myinteger[ch])
        prod *= int(myinteger[ch])
        #print('prod: ',prod)
    if prod > large:
        large = prod
        print('new largest_______________:',large)
        print('digits:',myinteger[count:count+13])
    count += 1
    prod = int(myinteger[count])
    #print('count---------:',count)
print('number size:',len(myinteger))
print(large)

# Practice parsing through this massive string

# Algorithm is able to find the 13 digits with the largest product,
# however, it doesn't calculate the correct product

# nevermind, prod was doubling up the multiplication

# correct answer is 23514624000
